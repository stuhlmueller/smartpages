var ones = function(n){
  if (n == 0){
    return [];
  } else {
    return [1].concat(ones(n-1));
  }
};

var range = function(n, j){
  var i = (j == undefined) ? 0 : j;
  if (i == n) {
    return [];
  } else {
    return [i].concat(range(n, i+1));
  }
};

var makeDirichletDiscrete = function(pseudocounts) {
  var addCount = function(a,i,j) {
    var j = j==undefined?0:j;
    if(a.length==0){
      return [];
    } else {
      return [a[0] + (i==j)].concat(addCount(a.slice(1),i,j+1));
    }
  };
  globalStore.DDindex = 1 + (globalStore.DDindex==undefined?0:globalStore.DDindex);
  var ddname = "DD" + globalStore.DDindex;
  globalStore[ddname] = pseudocounts;
  var ddSample = function(){
    var pc = globalStore[ddname];  // get current sufficient stats
    var val = sample(discreteERP, [pc]);  // sample from predictive. (doesn't need to be normalized.)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
    return val;
  };
  var ddObserve = function(val){
    var pc = globalStore[ddname];  // get current sufficient stats
    erpFactor(discreteERP, [util.normalizeArray(pc)], val);  // score based on predictive distribution (normalize counts)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
  };
  return [ddSample, ddObserve];
};


// var numLinks = 10;
// var numUserTypes = 3;

// var clickData = [
//   [0, 1, 0, 1], // First user clicked 0th, 1st, 0th, 1st link
//   [2, 3, 2, 3],
//   [4, 4, 4, 4],
//   [2]
// ];

var predict = function(numLinks, numUserTypes, clickData){
  var predictiveERP = Enumerate(
    function(){

      // Create a Dirichlet-Discrete sampler and factor for each user type
      var dists = repeat(
        numUserTypes,
        function(){return makeDirichletDiscrete(ones(numLinks));});
      var samplers = map(dists, function(d){return d[0];});
      var observes = map(dists, function(d){return d[1];});

      // Condition on previous users' clicks
      var previousDatasets = clickData.slice(0, clickData.length-1);
      map(
        previousDatasets,
        function(clicks){
          var userType = randomInteger(numUserTypes);
          var observe = observes[userType];
          map(clicks, observe);
        });

      // Condition on current user's clicks
      var clicks = clickData[clickData.length-1];
      var currentType = randomInteger(numUserTypes);
      var observe = observes[currentType];
      map(clicks, observe);

      // Predict current user's next click
      var ddSampler = samplers[currentType];
      var nextClick = ddSampler();

      // It's unlikely to be a click that has happened before
      map(clicks,
          function(click){
            if (nextClick == click){
              factor(-1.5);
            }});

      return nextClick;
    });

  var linkProbs = map(range(numLinks),
                      function(i){return Math.exp(predictiveERP.score([], i));});
  return linkProbs;
};

// predict(numLinks, numUserTypes, clickData);